<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <client_script><![CDATA[function($scope,$compile,spModal) {
  /* widget controller */
  var c = this;
	
	$scope.count = 0;
	
	//Get option values
	c.title = c.options.title || 'Position Map';
	c.glyph = c.options.glyph || '';
	
	console.log('Options');
	console.log(c.options);
	
	//Set value to show loading spinner
	c.data.loading = true;
	
	//After page initially loads re-call server script to load data
	c.server.get({
		action: 'retrieve_data'
	}).then(function(response) {
		
		//Set value to hide loading spinner
		c.data.loading = false;
		
		console.log('Response');
		console.log(response);
		
		//Get data
		c.list = response.data.list;

		//Get unique values
		c.country_list = [];
		c.city_list = [];
		
		//Create map, markers, and populate unique lists
		initializeMap();
		
	});
	
	/* Set the width of the side navigation to 250px */
	c.openNav = function() {
		document.getElementById("mySidenav").style.width = "250px";
		document.getElementById("main").style.marginLeft = "250px";
	}

	/* Set the width of the side navigation to 0 */
	c.closeNav = function() {
		console.log('david was here');
		
		document.getElementById("mySidenav").style.width = "0";
		document.getElementById("main").style.marginLeft = "0";
	}
	
	getInfo = function() {		
		spModal.open({
			title: 'More Information'
		}).then(function(){
    });
	}
	
	sendMessage = function() {
		spModal.open({
			title: 'Notice of Expression'
		}).then(function(){
    });
	}
	
	saveRemovePosition = function(marker_index) {
		
		if ($scope.oms.a[marker_index].saved) {
			console.log('delete');
			document.getElementById($scope.oms.a[marker_index].sys_id).setAttribute("class", "unsaved");
			$scope.oms.a[marker_index].saved = false;
			c.server.get({
				action: 'unsave_position',
				position: $scope.oms.a[marker_index].sys_id
			}).then(function(response) {
				if (response.data.pos_unsaved) {
					$rootScope.$broadcast('saveRemovePosition', response);
				}
			});
		} else {
			console.log('save');
			document.getElementById($scope.oms.a[marker_index].sys_id).setAttribute("class", "saved");
			$scope.oms.a[marker_index].saved = true;
			c.server.get({
				action: 'save_position',
				position: $scope.oms.a[marker_index].sys_id
			}).then(function(response) {
				if (response.data.pos_saved) {
					$rootScope.$broadcast('saveRemovePosition', response);
				}
			});
		}
		
	}
	
	c.filter = function() {

		for (var i=0; i<c.list.length; i++) {
			var marker = $scope.oms.a[i];
			
			//filter countries
			if (c.country_select) {
				var countries = c.country_select;
				if (countries.length !== 0) {
					document.getElementById("filterIcon").setAttribute("class", "panel-title filtered");
				} else {
					document.getElementById("filterIcon").setAttribute("class", "panel-title unfiltered");
				}
				
				// If is same category or category not picked
				if (countries.indexOf(marker.loc_country) != -1 || countries.length === 0) {
					marker.setVisible(true);
				}
				// Categories don't match 
				else {
					marker.setVisible(false);
				}
			}
			
			//filter cities
			if (c.city_select) {
				var cities = c.city_select;
				if (cities.length !== 0) {
					document.getElementById("filterIcon").setAttribute("class", "panel-title filtered");
				} else {
					document.getElementById("filterIcon").setAttribute("class", "panel-title unfiltered");
				}
				
				// If is same category or category not picked
				if (cities.indexOf(marker.loc_city) != -1 || cities.length === 0) {
					marker.setVisible(true);
				}
				// Categories don't match 
				else {
					marker.setVisible(false);
				}
			}
			
		}
		
		$scope.markerCluster.clearMarkers();
		initializeMapClusters();
		
	}
	
	function initializeMap() {
		
		//Angular App Module and Controller
		//angular.module('mapsApp', [])
		//	.controller('MapCtrl', function ($scope) {

			var mapOptions = {
				zoom: 4, //1: World, 5: Landmass, 10: City, 15: Streets, 20: Buildings
				minZoom: 1,
				center: new google.maps.LatLng(40.0000, -98.0000),
				mapTypeId: google.maps.MapTypeId.TERRAIN
			}

			$scope.map = new google.maps.Map(document.getElementById('map'), mapOptions);
		
			//$scope.markers = [];
			$scope.oms = new OverlappingMarkerSpiderfier($scope.map, {
				markersWontMove: true, //default: false
				//markersWontHide: false, //default: false
				//basicFormatEvents: false, //default: false
				keepSpiderfied: true, //default: false
				//ignoreMapClick: false, //default: false
				//nearbyDistance: 20, //default: 20
				circleSpiralSwitchover: 9 //default: 9
				//legWeight: 1.5 //default: 1.5
			});
		
      $scope.oms.addListener('format', function(marker, status) {
				setMarkerLabels(marker, status);
				//var label = status == OverlappingMarkerSpiderfier.markerStatus.SPIDERFIABLE ? '+' : null
        //marker.setLabel(label);
      });

			var createMarker = function (info){
				
				//Store unique countries
				if (c.country_list.indexOf(info.loc_country)===-1) {
					c.country_list.push(info.loc_country);
				}
				//Store unique countries
				if (c.city_list.indexOf(info.loc_city)===-1) {
					c.city_list.push(info.loc_city);
				}

				var marker = new google.maps.Marker({
					map: $scope.map,
					position: new google.maps.LatLng(info.loc_lat, info.loc_long),
					index: $scope.oms.a.length,
					sys_id: info.sys_id,
					saved: info.saved,
					pos_name: info.pos_name,
					pos_start_date: info.pos_start_date,
					pos_end_date: info.pos_end_date,
					loc_country: info.loc_country,
					loc_city: info.loc_city
				});
				
				marker.setVisible(true);
				
				$scope.oms.addMarker(marker);
				
				$scope.infoWindow = new google.maps.InfoWindow();
				
				google.maps.event.addListener(
					marker,
					'spider_click', 
					(function(){
						$scope.infoWindow.setContent(createContent(marker));
						$scope.infoWindow.open($scope.map, marker);
					})
				);
				
				/*
				google.maps.event.addListener(
					marker,
					'click', 
					(function(marker, $scope){
						return function() {
							var marker_content = '<div><div ng-include="\'star-button\'"></div></div>';
							$scope.sys_id = marker.sys_id;
							$scope.marker_index = $scope.oms.a.length-1;
							$scope.win = $scope.infoWindow;
							//$scope.button_id = marker.task_id;
							var compiledContent = $compile(marker_content)($scope);
							$scope.$apply();
							$scope.infoWindow.setContent(compiledContent[0].innerHTML);
							$scope.infoWindow.open($scope.map, marker);
						};
				})(marker, $scope)
				);
				*/

			}

			for (i = 0; i < c.list.length; i++){
				createMarker(c.list[i]);
			}			
		
			$scope.openInfoWindow = function(e, selectedMarker){
				e.preventDefault();
				google.maps.event.trigger(selectedMarker, 'click');
			}
			
			initializeMapClusters();
		
			/*
			$scope.markerCluster.addListener('clusterclick', function(cluster) {
				//do stuff here
			});
			*/
			
		//});
		
	}
	
	function createContent(marker) {
		
		var marker_content = '<div>' +
			'<span class="panel-title">'
		
		if (marker.saved) {
			marker_content += '<span id="'+marker.sys_id+'" type="button" class="saved" onclick="saveRemovePosition('+marker.index+')"><i class="fa fa-star" aria-hidden="true"></i></span>';	
		} else {
			marker_content += '<span id="'+marker.sys_id+'" type="button" class="grey" onclick="saveRemovePosition('+marker.index+')"><i class="fa fa-star" aria-hidden="true"></i></span>';
		}
		
		marker_content += '<span>' + '&nbsp; ' + marker.pos_name + '</span>' +
			'</span>' +
				'<div>' +
					'<div class="row">' +
						'<div class="col-xs-6">' +
							'<span><strong>Country</strong></span>' +
							'<br><span>' + marker.loc_country + '</span>' +
						'</div>' +
						'<div class="col-xs-6">' +
							'<span><strong>City</strong></span>' +
							'<br><span>' + marker.loc_city + '</span>' +
						'</div>' +
					'</div>' +
					'<br>' +
					'<div class="row">' +
						'<div class="col-xs-6">' +
							'<span><strong>Start Date</strong></span>' +
							'<br><span>' + marker.pos_start_date + '</span>' +
						'</div>' +
						'<div class="col-xs-6">' +
							'<span><strong>End Date</strong></span>' +
							'<br><span>' + marker.pos_end_date + '</span>' +
						'</div>' +
					'</div>' +
					'<br>' +
					'<div class="row">' +
						'<div class="col-xs-12">' +
							'<button name="info" type="button" class="btn btn-primary btn-block active" onclick="getInfo()">More Information</button>' +
							'<button name="bid" type="button" class="btn btn-primary btn-block active" onclick="sendMessage()">Express Interest</button>' +
						'</div>' +
					'</div>' +
				'</div>' +
			'<div>';
		
		return marker_content;
	}
	
	function setMarkerLabels (marker, status) {		
		//var label = status == OverlappingMarkerSpiderfier.markerStatus.SPIDERFIABLE ? '+' : null;
		var label = status == OverlappingMarkerSpiderfier.markerStatus.SPIDERFIABLE ? '+' :
    status == OverlappingMarkerSpiderfier.markerStatus.UNSPIDERFIABLE ? null : null
		marker.setLabel(label);
	}
	
	function initializeMapClusters() {
		var arr = [];
		
		for (i=0; i<$scope.oms.a.length; i++) {
			marker = $scope.oms.a[i];
			
			if (marker.getVisible()) {
				arr.push(marker);
			}
		}
		
		// Add a marker clusterer to manage the markers.
    $scope.markerCluster = new MarkerClusterer($scope.map, arr,
			{
				imagePath: 'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m'
				//zoomOnClick: true
		});
		
		var minClusterZoom = 14;
		$scope.markerCluster.setMaxZoom(minClusterZoom);
		
	}
		
}]]></client_script>
        <controller_as>c</controller_as>
        <css>#map {
	height:420px;
  width:100%;
}

.saved {
    color: gold;
}

.unsaved {
    color: grey;
}

.filtered {
    color: #428bca;
}

.unfiltered {
    color: grey;
}

/* The side navigation menu */
.sidenav {
    height: 100%; /* 100% Full-height */
    width: 0; /* 0 width - change this with JavaScript */
    position: absolute; /* Stay in place */
    z-index: 1; /* Stay on top */
    top: 0;
    left: 0;
    background-color: #111; /* #111 Black*/
    overflow-x: hidden; /* Disable horizontal scroll */
    padding-top: 0px; /* Place content 60px from the top */
    transition: 0.5s; /* 0.5 second transition effect to slide in the sidenav */
  	color: white;
}

/* Style page content - use this if you want to push the page content to the right when you open the side navigation */
#main {
    transition: margin-left .5s;
    padding: 20px;
}

/* On smaller screens, where height is less than 450px, change the style of the sidenav (less padding and a smaller font size) */
@media screen and (max-height: 450px) {
    .sidenav {padding-top: 15px;}
    .sidenav a {font-size: 18px;}
}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list>title,glyph</field_list>
        <has_preview>true</has_preview>
        <id>position_map_dv2</id>
        <internal>false</internal>
        <link/>
        <name>Position Map Dv2</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
  /* populate the 'data' object */
  /* e.g., data.table = $sp.getValue('table'); */
	
	//Get user sys_id
	var sys_user = gs.getUserID();
	
	//Do nothing on initial page load
	if (!input) {
		return;
	}
	
	//After page initially loads get data
	if (input && input.action == 'retrieve_data') {
		
		data.list = [];
		var positions = [];
		
		var status_vacant = '4d045d55dbb232008a9cf6fdbf96192d';
		
		var query1= 'status=' + status_vacant;
		var open_pos = new GlideRecord('x_107345_asgmt_open_position_request');
		open_pos.addEncodedQuery(query1);
		open_pos.query();
		while(open_pos.next()) {
			
			var query2 = 'employee=' + sys_user;
			query2 += '^position=' + open_pos.getValue('sys_id');
			var saved_pos = new GlideRecord('x_107345_asgmt_employee_saved_positions');
			saved_pos.addEncodedQuery(query2);
			saved_pos.query();
			
			var saved = (saved_pos.hasNext())? true : false;
			
			data.list.push({
				sys_id: open_pos.getValue('sys_id'),
				task_num: open_pos.getValue('number'),
				saved: saved,
				pos_id: open_pos.getValue('position'),
				pos_name: open_pos.getDisplayValue('position'),
				pos_start_date: open_pos.getValue('start_date'),
				pos_end_date: open_pos.getValue('end_date'),
				pos_status_id: open_pos.getValue('status'),
				pos_status_name: open_pos.getDisplayValue('status'),
				loc: open_pos.position.u_location.getRefRecord().getValue('sys_id'),
				loc_name: open_pos.position.u_location.getRefRecord().getValue('name'),
				loc_country: open_pos.position.u_location.getRefRecord().getValue('country'),
				loc_city: open_pos.position.u_location.getRefRecord().getValue('city'),
				loc_lat: open_pos.position.u_location.getRefRecord().getValue('latitude'),
				loc_long: open_pos.position.u_location.getRefRecord().getValue('longitude')
			});
		}
		
	}
	
	if (input && input.action == 'save_position') {
		
		var save = new GlideRecord('x_107345_asgmt_employee_saved_positions');
		save.initialize();
		save.employee = sys_user;
		save.position = input.position;
		save.insert();
		
		data.pos_saved = true;
		
	}
	
	if (input && input.action == 'unsave_position') {
		
		var query3 = 'employee=' + sys_user;
		query3 += '^position=' + input.position;
		var unsave = new GlideRecord('x_107345_asgmt_employee_saved_positions');
		unsave.addEncodedQuery(query3);
		unsave.deleteMultiple();
		
		data.pos_unsaved = true;
	
	}

})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2017-05-23 14:46:07</sys_created_on>
        <sys_customer_update>true</sys_customer_update>
        <sys_id>24893e17db3232008a9cf6fdbf961955</sys_id>
        <sys_mod_count>410</sys_mod_count>
        <sys_name>Position Map Dv2</sys_name>
        <sys_package display_value="Asgmt" source="x_107345_asgmt">00e604acdba232008a9cf6fdbf961994</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Asgmt">00e604acdba232008a9cf6fdbf961994</sys_scope>
        <sys_update_name>sp_widget_24893e17db3232008a9cf6fdbf961955</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2017-05-24 22:17:45</sys_updated_on>
        <template><![CDATA[<div class="panel panel-default">
  
	<div class="panel-heading">
		<span class="panel-title"><i class="fa fa-{{c.glyph}}" aria-hidden="true"></i>&nbsp; {{c.title}}</span>
	</div>
  
  <div class="panel-body" ng-if="c.data.loading">
    
    <span><i class="fa fa-spinner fa-spin fa-3x fafw"></i>
      <span class="sr-only">Loading...</span>
    </span>
    
  </div>
  
  <div class="panel-body">

    <div id="mySidenav" class="sidenav" ng-if="!c.data.loading">
      
      <div class="panel-heading">
        <div class="row">
        	<div class="col-xs-10">
        		<span class="panel-title"><i class="fa fa-{{c.filter}}" aria-hidden="true"></i>&nbsp; Filter Positions</span>
          </div>
          <div class="col-xs-2">
            <span class="panel-title" ng-click="c.closeNav()"><i class="fa fa-times" aria-hidden="true"></i></span>
          </div>
        </div>
      </div>

     	<label for="country">&nbsp; Country</label>
     	<multiselect  id="country" ng-model="c.country_select" options="c.country_list" show-search="true" show-unselect-all="true" ng-change="c.filter()"></multiselect>
     	<label for="country">&nbsp; City</label>
     	<multiselect  id="country" ng-model="c.city_select" options="c.city_list" show-search="true" show-unselect-all="true" ng-change="c.filter()"></multiselect>
      
      <!--
      <form>
        <div class="form-group">
          <label for="country">&nbsp; Country (Hold CTRL to select more than one):</label>
          <select multiple class="form-control" id="country" ng-model="c.country_select" ng-change="c.filter()">
            <option ng-repeat="item in c.list | unique: 'loc_country' track by $index">{{item.loc_country}}</option>
          </select>
          <label for="city">&nbsp; City (Hold CTRL to select more than one):</label>
          <select multiple class="form-control" id="city" ng-model="c.city_select" ng-change="c.filter()">
            <option ng-repeat="item in c.list | unique: 'loc_city' track by $index">{{item.loc_city}}</option>
          </select>
        </div>
      </form>
			-->
        
    </div>
    
    <div class="row" ng-if="!c.data.loading">
    	<div class="col-xs-12">
      	<span id="filterIcon" class="panel-title" ng-click="c.openNav()"><i class="fa fa-filter" aria-hidden="true"></i>&nbsp; Filter</span>
        <!--<span ng-click="c.openNav()"><i class="glyphicon glyphicon-menu-hamburger" style="line-height: 1.4em" aria-expanded="true"></i></span>-->
      </div>
    </div>
  
    <div id="main">
      
      <div class="row">
        <div class="col-xs-12">
          <div id="map"></div>
        </div>
      </div>

      <!--
      <div class="row" ng-if="!c.data.loading">
        <div class="col-xs-12">

          <br>
          <h4>MAP FILTER</h4>

          <form>
            <div class="form-group">
              <label for="country">Country (Hold CTRL to select more than one):</label>
              <select multiple class="form-control" id="country" ng-model="c.country_select" ng-change="c.filter()">
                <option ng-repeat="item in c.list | unique: 'loc_country' track by $index">{{item.loc_country}}</option>
              </select>
              <label for="city">City (Hold CTRL to select more than one):</label>
              <select multiple class="form-control" id="city" ng-model="c.city_select" ng-change="c.filter()">
                <option ng-repeat="item in c.list | unique: 'loc_city' track by $index">{{item.loc_city}}</option>
              </select>
            </div>
          </form>

        </div>
      </div>
			-->
      
    </div>
    
  </div>
    
</div>]]></template>
    </sp_widget>
</record_update>
